name: Deploy to Development

on:
  push:
    branches:
      - devel

jobs:
  deploy:
    name: Deploy to Devel Environment
    runs-on: ubuntu-latest
    environment: devel

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '15'
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Build Application
        run: npm run build
        env:
          REACT_APP_ENV: devel

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: terraform/environments/devel
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform/environments/devel
        run: terraform apply -auto-approve

      # ✅ FIXED: Clean Terraform output capture for S3 bucket
      - name: Get S3 Bucket Name
        id: bucket
        working-directory: terraform/environments/devel
        run: |
          set -euo pipefail
          BUCKET=$(terraform output -raw website_bucket_name 2>/dev/null | tr -d '\r\n')
          echo "bucket_name=${BUCKET}" >> $GITHUB_OUTPUT

      - name: Sync Build to S3
        run: |
          aws s3 sync build/ s3://${{ steps.bucket.outputs.bucket_name }}/ --delete

      # ✅ FIXED: Clean Terraform output capture for CloudFront ID
      - name: Get CloudFront Distribution ID
        id: cloudfront
        working-directory: terraform/environments/devel
        run: |
          set -euo pipefail
          DIST_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null | tr -d '\r\n')
          echo "distribution_id=${DIST_ID}" >> $GITHUB_OUTPUT

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.cloudfront.outputs.distribution_id }} \
            --paths "/*"

      - name: Deployment Complete
        working-directory: terraform/environments/devel
        run: |
          set -euo pipefail
          echo "✅ Deployment to Development environment successful!"
          echo "CloudFront URL:"
          terraform output -raw cloudfront_domain_name 2>/dev/null | tr -d '\r\n' || true
